#=
        SYNTACTIC SÃ∂UÃ∂GÃ∂AÃ∂RÃ∂ SAUCE
        =====================
        better than sweet
=#


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#  INFIX OPERATORS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#=  ingredients list:
    a subset of the following unicode symbolsÍúù have the special property in
    julia of being interpretable as infix operators, like multiplication or
    addition, etc.
        + < = > | ~ ¬¨ ¬± √ó √∑ œ∂ ÿÜ ÿá ÿà ‚ÅÑ ‚Åí ‚Å∫ ‚Åª ‚Åº ‚Çä ‚Çã ‚Çå ‚Ñò ‚ÖÄ ‚ÖÅ ‚ÖÇ ‚ÖÉ ‚ÖÑ ‚Öã ‚Üê ‚Üë ‚Üí ‚Üì ‚Üî
        ‚Üö ‚Üõ ‚Ü† ‚Ü£ ‚Ü¶ ‚ÜÆ ‚áé ‚áè ‚áí ‚áî ‚á¥ ‚áµ ‚á∂ ‚á∑ ‚á∏ ‚áπ ‚á∫ ‚áª ‚áº ‚áΩ ‚áæ ‚áø ‚àÄ ‚àÅ ‚àÇ ‚àÉ ‚àÑ ‚àÖ ‚àÜ ‚àá ‚àà ‚àâ ‚àä ‚àã
        ‚àå ‚àç ‚àé ‚àè ‚àê ‚àë ‚àí ‚àì ‚àî ‚àï ‚àñ ‚àó ‚àò ‚àô ‚àö ‚àõ ‚àú ‚àù ‚àû ‚àü ‚à† ‚à° ‚à¢ ‚à£ ‚à§ ‚à• ‚à¶ ‚àß ‚à® ‚à© ‚à™ ‚à´ ‚à¨ ‚à≠
        ‚àÆ ‚àØ ‚à∞ ‚à± ‚à≤ ‚à≥ ‚à¥ ‚àµ ‚à∂ ‚à∑ ‚à∏ ‚àπ ‚à∫ ‚àª ‚àº ‚àΩ ‚àæ ‚àø ‚âÄ ‚âÅ ‚âÇ ‚âÉ ‚âÑ ‚âÖ ‚âÜ ‚âá ‚âà ‚ââ ‚âä ‚âã ‚âå ‚âç ‚âé ‚âè
        ‚âê ‚âë ‚âí ‚âì ‚âî ‚âï ‚âñ ‚âó ‚âò ‚âô ‚âö ‚âõ ‚âú ‚âù ‚âû ‚âü ‚â† ‚â° ‚â¢ ‚â£ ‚â§ ‚â• ‚â¶ ‚âß ‚â® ‚â© ‚â™ ‚â´ ‚â¨ ‚â≠ ‚âÆ ‚âØ ‚â∞ ‚â±
        ‚â≤ ‚â≥ ‚â¥ ‚âµ ‚â∂ ‚â∑ ‚â∏ ‚âπ ‚â∫ ‚âª ‚âº ‚âΩ ‚âæ ‚âø ‚äÄ ‚äÅ ‚äÇ ‚äÉ ‚äÑ ‚äÖ ‚äÜ ‚äá ‚äà ‚äâ ‚ää ‚äã ‚äå ‚äç ‚äé ‚äè ‚äê ‚äë ‚äí ‚äì
        ‚äî ‚äï ‚äñ ‚äó ‚äò ‚äô ‚äö ‚äõ ‚äú ‚äù ‚äû ‚äü ‚ä† ‚ä° ‚ä¢ ‚ä£ ‚ä§ ‚ä• ‚ä¶ ‚äß ‚ä® ‚ä© ‚ä™ ‚ä´ ‚ä¨ ‚ä≠ ‚äÆ ‚äØ ‚ä∞ ‚ä± ‚ä≤ ‚ä≥ ‚ä¥ ‚äµ
        ‚ä∂ ‚ä∑ ‚ä∏ ‚äπ ‚ä∫ ‚äª ‚äº ‚äΩ ‚äæ ‚äø ‚ãÄ ‚ãÅ ‚ãÇ ‚ãÉ ‚ãÑ ‚ãÖ ‚ãÜ ‚ãá ‚ãà ‚ãâ ‚ãä ‚ãã ‚ãå ‚ãç ‚ãé ‚ãè ‚ãê ‚ãë ‚ãí ‚ãì ‚ãî ‚ãï ‚ãñ ‚ãó
        ‚ãò ‚ãô ‚ãö ‚ãõ ‚ãú ‚ãù ‚ãû ‚ãü ‚ã† ‚ã° ‚ã¢ ‚ã£ ‚ã§ ‚ã• ‚ã¶ ‚ãß ‚ã® ‚ã© ‚ã™ ‚ã´ ‚ã¨ ‚ã≠ ‚ãÆ ‚ãØ ‚ã∞ ‚ã± ‚ã≤ ‚ã≥ ‚ã¥ ‚ãµ ‚ã∂ ‚ã∑ ‚ã∏ ‚ãπ
        ‚ã∫ ‚ãª ‚ãº ‚ãΩ ‚ãæ ‚ãø ‚å† ‚å° ‚çº ‚éõ ‚éú ‚éù ‚éû ‚éü ‚é† ‚é° ‚é¢ ‚é£ ‚é§ ‚é• ‚é¶ ‚éß ‚é® ‚é© ‚é™ ‚é´ ‚é¨ ‚é≠ ‚éÆ ‚éØ ‚é∞ ‚é± ‚é≤ ‚é≥
        ‚èú ‚èù ‚èû ‚èü ‚è† ‚è° ‚ñ∑ ‚óÅ ‚ó∏ ‚óπ ‚ó∫ ‚óª ‚óº ‚óΩ ‚óæ ‚óø ‚ôØ ‚üÄ ‚üÅ ‚üÇ ‚üÉ ‚üÑ ‚üá ‚üà ‚üâ ‚üä ‚üã ‚üå ‚üç ‚üé ‚üè ‚üê ‚üë
        ‚üí ‚üì ‚üî ‚üï ‚üñ ‚üó ‚üò ‚üô ‚üö ‚üõ ‚üú ‚üù ‚üû ‚üü ‚ü† ‚ü° ‚ü¢ ‚ü£ ‚ü§ ‚ü• ‚ü∞ ‚ü± ‚ü≤ ‚ü≥ ‚ü¥ ‚üµ ‚ü∂ ‚ü∑ ‚ü∏ ‚üπ
        ‚ü∫ ‚üª ‚üº ‚üΩ ‚üæ ‚üø ‚§Ä ‚§Å ‚§Ç ‚§É ‚§Ñ ‚§Ö ‚§Ü ‚§á ‚§à ‚§â ‚§ä ‚§ã ‚§å ‚§ç ‚§é ‚§è ‚§ê ‚§ë ‚§í ‚§ì ‚§î ‚§ï ‚§ñ ‚§ó ‚§ò
        ‚§ô ‚§ö ‚§õ ‚§ú ‚§ù ‚§û ‚§ü ‚§† ‚§° ‚§¢ ‚§£ ‚§§ ‚§• ‚§¶ ‚§ß ‚§® ‚§© ‚§™ ‚§´ ‚§¨ ‚§≠ ‚§Æ ‚§Ø ‚§∞ ‚§± ‚§≤ ‚§≥ ‚§¥ ‚§µ ‚§∂ ‚§∑ ‚§∏ ‚§π ‚§∫
        ‚§ª ‚§º ‚§Ω ‚§æ ‚§ø ‚•Ä ‚•Å ‚•Ç ‚•É ‚•Ñ ‚•Ö ‚•Ü ‚•á ‚•à ‚•â ‚•ä ‚•ã ‚•å ‚•ç ‚•é ‚•è ‚•ê ‚•ë ‚•í ‚•ì ‚•î ‚•ï ‚•ñ ‚•ó ‚•ò ‚•ô ‚•ö ‚•õ ‚•ú
        ‚•ù ‚•û ‚•ü ‚•† ‚•° ‚•¢ ‚•£ ‚•§ ‚•• ‚•¶ ‚•ß ‚•® ‚•© ‚•™ ‚•´ ‚•¨ ‚•≠ ‚•Æ ‚•Ø ‚•∞ ‚•± ‚•≤ ‚•≥ ‚•¥ ‚•µ ‚•∂ ‚•∑ ‚•∏ ‚•π ‚•∫ ‚•ª ‚•º ‚•Ω ‚•æ
        ‚•ø ‚¶Ä ‚¶Å ‚¶Ç ‚¶ô ‚¶ö ‚¶õ ‚¶ú ‚¶ù ‚¶û ‚¶ü ‚¶† ‚¶° ‚¶¢ ‚¶£ ‚¶§ ‚¶• ‚¶¶ ‚¶ß ‚¶® ‚¶© ‚¶™ ‚¶´ ‚¶¨ ‚¶≠ ‚¶Æ ‚¶Ø ‚¶∞ ‚¶± ‚¶≤ ‚¶≥ ‚¶¥ ‚¶µ ‚¶∂
        ‚¶∑ ‚¶∏ ‚¶π ‚¶∫ ‚¶ª ‚¶º ‚¶Ω ‚¶æ ‚¶ø ‚ßÄ ‚ßÅ ‚ßÇ ‚ßÉ ‚ßÑ ‚ßÖ ‚ßÜ ‚ßá ‚ßà ‚ßâ ‚ßä ‚ßã ‚ßå ‚ßç ‚ßé ‚ßè ‚ßê ‚ßë ‚ßí ‚ßì ‚ßî ‚ßï ‚ßñ
        ‚ßó ‚ßú ‚ßù ‚ßû ‚ßü ‚ß† ‚ß° ‚ß¢ ‚ß£ ‚ß§ ‚ß• ‚ß¶ ‚ßß ‚ß® ‚ß© ‚ß™ ‚ß´ ‚ß¨ ‚ß≠ ‚ßÆ ‚ßØ ‚ß∞ ‚ß± ‚ß≤ ‚ß≥ ‚ß¥ ‚ßµ ‚ß∂ ‚ß∑ ‚ß∏ ‚ßπ ‚ß∫ ‚ßª ‚ßæ
        ‚ßø ‚®Ä ‚®Å ‚®Ç ‚®É ‚®Ñ ‚®Ö ‚®Ü ‚®á ‚®à ‚®â ‚®ä ‚®ã ‚®å ‚®ç ‚®é ‚®è ‚®ê ‚®ë ‚®í ‚®ì ‚®î ‚®ï ‚®ñ ‚®ó ‚®ò ‚®ô ‚®ö ‚®õ ‚®ú ‚®ù ‚®û ‚®ü ‚®†
        ‚®° ‚®¢ ‚®£ ‚®§ ‚®• ‚®¶ ‚®ß ‚®® ‚®© ‚®™ ‚®´ ‚®¨ ‚®≠ ‚®Æ ‚®Ø ‚®∞ ‚®± ‚®≤ ‚®≥ ‚®¥ ‚®µ ‚®∂ ‚®∑ ‚®∏ ‚®π ‚®∫ ‚®ª ‚®º ‚®Ω ‚®æ ‚®ø ‚©Ä ‚©Å ‚©Ç
        ‚©É ‚©Ñ ‚©Ö ‚©Ü ‚©á ‚©à ‚©â ‚©ä ‚©ã ‚©å ‚©ç ‚©é ‚©è ‚©ê ‚©ë ‚©í ‚©ì ‚©î ‚©ï ‚©ñ ‚©ó ‚©ò ‚©ô ‚©ö ‚©õ ‚©ú ‚©ù ‚©û ‚©ü ‚©† ‚©° ‚©¢ ‚©£ ‚©§
        ‚©• ‚©¶ ‚©ß ‚©® ‚©© ‚©™ ‚©´ ‚©¨ ‚©≠ ‚©Æ ‚©Ø ‚©∞ ‚©± ‚©≤ ‚©≥ ‚©¥ ‚©µ ‚©∂ ‚©∑ ‚©∏ ‚©π ‚©∫ ‚©ª ‚©º ‚©Ω ‚©æ ‚©ø ‚™Ä ‚™Å ‚™Ç ‚™É ‚™Ñ ‚™Ö ‚™Ü
        ‚™á ‚™à ‚™â ‚™ä ‚™ã ‚™å ‚™ç ‚™é ‚™è ‚™ê ‚™ë ‚™í ‚™ì ‚™î ‚™ï ‚™ñ ‚™ó ‚™ò ‚™ô ‚™ö ‚™õ ‚™ú ‚™ù ‚™û ‚™ü ‚™† ‚™° ‚™¢ ‚™£ ‚™§ ‚™• ‚™¶ ‚™ß ‚™®
        ‚™© ‚™™ ‚™´ ‚™¨ ‚™≠ ‚™Æ ‚™Ø ‚™∞ ‚™± ‚™≤ ‚™≥ ‚™¥ ‚™µ ‚™∂ ‚™∑ ‚™∏ ‚™π ‚™∫ ‚™ª ‚™º ‚™Ω ‚™æ ‚™ø ‚´Ä ‚´Å ‚´Ç ‚´É ‚´Ñ ‚´Ö ‚´Ü ‚´á ‚´à ‚´â ‚´ä
        ‚´ã ‚´å ‚´ç ‚´é ‚´è ‚´ê ‚´ë ‚´í ‚´ì ‚´î ‚´ï ‚´ñ ‚´ó ‚´ò ‚´ô ‚´ö ‚´õ ‚´ù ‚´û ‚´ü ‚´† ‚´° ‚´¢ ‚´£ ‚´§ ‚´• ‚´¶ ‚´ß ‚´® ‚´© ‚´™ ‚´´ ‚´¨ ‚´≠
        ‚´Æ ‚´Ø ‚´∞ ‚´± ‚´≤ ‚´≥ ‚´¥ ‚´µ ‚´∂ ‚´∑ ‚´∏ ‚´π ‚´∫ ‚´ª ‚´º ‚´Ω ‚´æ ‚´ø ‚¨∞ ‚¨± ‚¨≤ ‚¨≥ ‚¨¥ ‚¨µ ‚¨∂ ‚¨∑ ‚¨∏ ‚¨π ‚¨∫ ‚¨ª ‚¨º ‚¨Ω ‚¨æ
        ‚¨ø ‚≠Ä ‚≠Å ‚≠Ç ‚≠É ‚≠Ñ ‚≠á ‚≠à ‚≠â ‚≠ä ‚≠ã ‚≠å Ô¨© Ôπ¢ Ôπ§ Ôπ• Ôπ¶ Ôºã Ôºú Ôºù Ôºû ÔΩú ÔΩû Ôø¢ Ôø© Ôø™ Ôø´ Ôø¨ ùõÅ
        ùõõ ùõª ùúï ùúµ ùùè ùùØ ùûâ ùû© ùüÉ ûª∞ ûª±
    (Íúùc.f. https://discourse.julialang.org/t/is-not-an-operator/20221/2; there
     are also a few other overloadable infix operators, such as:
        ‚Äì logical operrators, e.g., && and ||
        ‚Äì the >> and << operators, which are probably bit-shifts (?REPL bug)
        ‚Äì the pipe operators |> and <| extended below
     the extensibility of <| despite any default definition suggests that there
     may be other special symbols/combos thereof with this property as well...
     note that the above list has not been manually verified!)
=#

# EXTENSION OF PIPE OPERATOR TO HIGHER-ARITY FUNCTIONS
import Base.|>
#   extends right-pipe operator to support anyonmous functions with multiple
#   arguments (though care must be taken with certain functions; see below)
#   for example:
#       (1, 2) |> (a,b)-> a+b
#   returns `3` instead of an error‚Äî‚Äî‚Äîmakes anonymous function calls much
#   prettier and more readable overall
|>( arg, func ) = applicable(func, arg) ? func(arg) : func(arg...)
#   (this is as fast as Base.|> and even allocates less memory compared to the
#    equivalent call with the original version, i.e.,
#       (1,2) |> z-> z[1]+z[2]
#    according to @time; however, an ambiguity can arise when multiple methods
#    are available under the same handle func() taking in different numbers of
#    arguments, e.g.,
#    	func(a)     = ...
#    	func(a,b)   = ...
#    	func(a,b,c) = ...
#    in which case func(a) will always be called, so as to enforce
#    consistency with original behavior and avoid breaking any previously
#    written code while also minimizing overhead‚Äî‚Äî‚Äîto disambiguate, simply
#    wrap the multi-argument method in the new, prettier anonymous syntax,
#    i.e., ` (1,2) |> (a,b)->func(a,b) `, which introduces no extra overhead)

# LEFT-PIPE OPERATOR‚Äî‚Äî‚ÄîFOR AVOIDING EVEN MORE PARENTHESES
#   the above syntax can be extended further to support a mirrored version;
#   for example:
#       ((a,b)-> a+b) <| (1,2)
#   returns `3` analogously to the above example (note the extra parentheses on
#   the left, which are only necessary when left-piping anonymous functions)
<|( F, X ) = |>(X, F)

# STRING-ASSIGNMENT INFIX OPERATOR
#   metaprogramming shortcut, can be input using `\Colon<Tab>`;
#   for example:
#       "RNG" ‚à∑ rand()
#   places the variable `RNG` in global scope with value corresponding to the
#   associated `rand()` call‚Äî‚Äî‚Äîalso works with Symbol-valued left-hand-sides,
#   useful for automatically populating / dynamically updating an environment
‚à∑( handle::Union{String,Symbol}, value ) = eval(:($(Symbol(handle)) = $value))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
